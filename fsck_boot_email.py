#!/usr/bin/env python3.7
import sys
import time
import datetime
import smtplib
import socket
import urllib.request
import dbus

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from systemd import journal

MY_ADDRESS = 'ENTER YOUR USERNAME / EMAIL ADDRESS HERE' #Username
PASSWORD = 'ENTER YOUR PASSWORD HERE' #Password
SMTPHost = 'ENTER YOUR SMTP HOST ADDRESS HERE' #SMTP Host i.e. for Outlook 365
SMTPPort = 587 #SMTP Port

def get_ip_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80)) #Google DNS IP for connection test
    ip_addr = s.getsockname()[0]
    s.close()
    return(ip_addr)

def main():

    # wait for (X) secs to ensure wireless connection is UP after boot. This is neccessary for script to work via CRON
    time.sleep(20)
    # set up the SMTP server connection
    try:
        s = smtplib.SMTP(SMTPHost,SMTPPort)
        s.starttls()
        s.login(MY_ADDRESS, PASSWORD)
    except:
    	print("Unexpected error during SMTP Connection:", sys.exc_info())
    	raise
    # attempt to invoke start of ntp systemd service so that date/timestamp in email is correct
    try:
        sysbus = dbus.SystemBus()
        systemd1 = sysbus.get_object('org.freedesktop.systemd1', '/org/freedesktop/systemd1')
        manager = dbus.Interface(systemd1, 'org.freedesktop.systemd1.Manager')
        job = manager.RestartUnit('ntp.service', 'fail')
        # wait 20 seconds to allow sufficent time for restart of NTP service to occur and for correct system date
        # to be set.
        time.sleep(20)
    except:
        print("Unexpected error during NTP Service Restart:", sys.exc_info())
        raise
    # create a MIMEMultipart message required for email
    msg = MIMEMultipart()

    # create a SYSTEMD Journal Reader object
    j = journal.Reader()
    # define scope of Journal entries only to current system boot
    j.this_boot()
    # define scope of Journal entries to only include INFO logs
    j.log_level(journal.LOG_INFO)
    # define scope of Journal entries to only that generated by systemd-fsck daemon
    j.add_match(SYSLOG_IDENTIFIER="systemd-fsck")

    # grab journal entries and write those to a string for email body
    fsck_results_str = ""
    for entry in j:
        fsck_results_str = fsck_results_str + entry['MESSAGE'] + "\n"

    # add IP address to bottom of email body
    fsck_results_str = fsck_results_str + "\nIP Address: " + get_ip_address()

    # print email body string ---- ONLY USED FOR DEBUGGING
    #print(fsck_results_str)

    # setup the parameters of the email message
    msg['From']=MY_ADDRESS
    msg['To']=MY_ADDRESS
    msg['Subject']="FSCK BOOT Results on " + datetime.datetime.now().strftime("%m-%d-%Y %H:%M") + " for host " + socket.gethostbyaddr(socket.gethostname())[0]

    # add to message the the message body string
    msg.attach(MIMEText(fsck_results_str, 'plain'))

    # send the message via the SMTP connection set up earlier.
    s.send_message(msg)
    print("FSCK BOOT Results Email sent successfully")
    # delete the message object now that the message has been sent
    del msg
    # Terminate the SMTP session and close the connection
    s.quit()

if __name__ == '__main__':
    main()
    sys.exit(0)
